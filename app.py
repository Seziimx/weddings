from flask import Flask, render_template, request, redirect, url_for, Response
import sqlite3
import os
import requests
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

app = Flask(__name__)
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äî –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
def init_db():
    if not os.path.exists("guests.db"):
        conn = sqlite3.connect("guests.db")
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE guests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                phone TEXT NOT NULL,
                relation TEXT NOT NULL,
                comment TEXT,
                gift TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

init_db()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return render_template("index.html")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
@app.route("/submit", methods=["POST"])
def submit():
    name = request.form["name"]
    phone = request.form["phone"]
    relation = request.form["relation"]
    comment = request.form["comment"]
    gift = request.form["gift"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = sqlite3.connect("guests.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO guests (name, phone, relation, comment, gift) VALUES (?, ?, ?, ?, ?)",
               (name, phone, relation, comment, gift))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    send_to_telegram(name, phone, relation,  comment, gift)

    return redirect(url_for("thanks"))

# –°–ø–∞—Å–∏–±–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/thanks")
def thanks():
    return render_template("thanks.html")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    requests.post(url, data=payload)

# Webhook –æ—Ç Telegram
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()

    if "message" in data:
        from_chat = str(data["message"]["chat"]["id"])
        text = data["message"].get("text", "")

        if from_chat != CHAT_ID:
            send_message(from_chat, "–¢–µ–∫ “õ–∞–Ω–∞ ”ô–∫—ñ–º—à—ñ–ª—ñ–∫ “Ø—à—ñ–Ω üëÆ‚Äç‚ôÄÔ∏è")
            return "ok", 200

        if text == "/guests":
            conn = sqlite3.connect("guests.db")
            cursor = conn.cursor()
            cursor.execute("SELECT name, phone, relation, gift FROM guests")
            rows = cursor.fetchall()
            conn.close()

            if not rows:
                send_message(from_chat, "“ö–æ–Ω–∞“õ—Ç–∞—Ä ”ô–∑—ñ—Ä–≥–µ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω.")
            else:
                message = "üìã “ö–æ–Ω–∞“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ:\n\n"
                for row in rows:
                    message += f"üë§ {row[0]} | üì± {row[1]} | ü§ù {row[2]} | üéÅ {row[3]} ‚Ç∏\n"
                send_message(from_chat, message)

    return "ok", 200


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def send_to_telegram(name, phone, relation, comment, gift):
    token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    
    message = f"""
üìã –ñ–∞“£–∞ “õ–æ–Ω–∞“õ!
üë§ –ê—Ç—ã: {name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
ü§ù –¢—É—ã—Å—Ç—ã“õ “õ–∞—Ç—ã—Å—ã: {relation}
üéÅ –ö”ô–¥–µ: {gift} ‚Ç∏
üìù –¢—ñ–ª–µ–≥—ñ: {comment if comment else '‚Äî'}
    """

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message
    }
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"‚ùå Telegram-“ì–∞ –∂—ñ–±–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")



# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(debug=True)